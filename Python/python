Основы Python:

Вопрос: Что такое PEP 8 и почему он важен для написания чистого кода на Python?

Ответ: PEP 8 - это руководство по стилю для кода на Python, предлагающее соглашения о том, как писать код для обеспечения читаемости и поддержания единообразия в сообществе разработчиков.
Вопрос: В чем разница между list и tuple в Python?

Ответ: list - изменяемый тип данных, который можно изменять после создания. tuple - неизменяемый тип данных, элементы которого не могут быть изменены после создания.
Вопрос: Как работает сборщик мусора в Python?

Ответ: Сборщик мусора в Python отслеживает объекты, на которые нет активных ссылок, и автоматически освобождает память, которую они занимают.
Работа с виртуальными окружениями и зависимостями:

Вопрос: Как создать виртуальное окружение в Python?

Ответ: Выполните команду python -m venv myenv для создания виртуального окружения.
Вопрос: Какие инструменты используются для управления зависимостями в Python?

Ответ: pip - стандартный инструмент для установки и управления зависимостями Python.
Вопрос: Что такое requirements.txt и как его использовать?

Ответ: requirements.txt - это файл, в котором перечислены зависимости вашего проекта. Используется для установки всех зависимостей с помощью pip install -r requirements.txt.
Работа с файлами и обработка данных:

Вопрос: Как прочитать и записать данные из/в файл в Python?

Ответ: Для чтения используйте with open('file.txt', 'r') as f: data = f.read(). Для записи - with open('file.txt', 'w') as f: f.write('Hello, world!').
Вопрос: Как обработать JSON-данные в Python?

Ответ: Используйте модуль json. Для чтения: import json; data = json.loads(json_string). Для записи: json_data = json.dumps(data).
Автоматизация задач:

Вопрос: Какие библиотеки Python вы использовали для автоматизации задач (например, Fabric, Ansible)?

Ответ: Например, Fabric и Ansible - это популярные инструменты для автоматизации задач в Python.
Вопрос: Как можно запустить внешний процесс из Python?

Ответ: Используйте модуль subprocess. Например, subprocess.run(["command", "arg1", "arg2"]).
Работа с сетью и HTTP:

Вопрос: Какие модули Python вы использовали для работы с сетевыми запросами (например, HTTP/HTTPS)?

Ответ: requests - популярная библиотека для HTTP-запросов в Python.
Вопрос: Как создать простой веб-сервер с использованием модуля http.server?

Ответ: python -m http.server запустит веб-сервер на порту 8000 по умолчанию.
Логирование и отладка:

Вопрос: Как настроить логирование в Python?

Ответ: Используйте встроенный модуль logging. Например, import logging; logging.basicConfig(level=logging.DEBUG).
Вопрос: Как использовать PDB для отладки Python-скрипта?

Ответ: Вставьте import pdb; pdb.set_trace() в код, чтобы войти в интерактивный режим отладки.
Работа с Docker:

Вопрос: Какие библиотеки Python используются для взаимодействия с Docker API?

Ответ: docker - популярная библиотека Python для работы с Docker.
Вопрос: Как создать Docker контейнер и запустить его из Python?

Ответ: Используйте docker-py для взаимодействия с Docker API. Пример: client.containers.run("image_name").
Интеграция с CI/CD:

Вопрос: Какие инструменты вы использовали для интеграции Python-приложений с CI/CD пайплайнами?

Ответ: Примеры: Jenkins, GitLab CI, Travis CI.
Вопрос: Как можно автоматизировать тестирование и развертывание приложений с использованием CI/CD?

Ответ: Написание тестов, интеграция и настройка CI/CD скриптов (например, .gitlab-ci.yml, .travis.yml).
Безопасность:

Вопрос: Как обеспечить безопасность Python-приложений в контексте DevOps?

Ответ: Пользуйтесь инструментами типа bandit для анализа безопасности кода, обновляйте зависимости, следите за уязвимостями.
Вопрос: Как обрабатывать конфиденциальные данные, такие как пароли, в Python?

Ответ: Используйте библиотеку python-decouple для хранения конфиденциальных данных в отдельном файле, не включенном в репозиторий.
Мониторинг и логирование:

Вопрос: Какие инструменты и библиотеки Python вы использовали для мониторинга и логирования приложений?

Ответ: Примеры: Prometheus, Grafana, ELK stack (Elasticsearch, Logstash, Kibana).
Вопрос: Как настроить централизованный сбор и анализ логов с использованием Python?

Ответ: Используйте библиотеки и инструменты, такие как logstash-forwarder, Filebeat, или fluentd для централизованного сбора логов, и настройте их интеграцию с системами анализа, например, ELK stack.
